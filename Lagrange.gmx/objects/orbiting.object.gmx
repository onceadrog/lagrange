<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>orbit</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_values</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>killme</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>g_dir</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>g_offset</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>launch_countdown</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get g_offset parameters
room_scale = camera.room_scale;    
var new_g_dir;
var new_g_offset;

if (distance_to_object(moon)&lt;250){  //Assume moon SOI = 250px
    SOI_grav = moon.grav/10;
    SOI_radius = moon.radius;
    SOI_rotation = moon.rotation;
    g_dist = distance_to_object(moon)*room_scale + SOI_radius;
    g_dist -= SOI_radius;
    new_g_dir = point_direction(x, y, moon.x, moon.y);
} else {
    SOI_grav = earth.grav/10;
    SOI_rotation = earth.rotation;
    SOI_radius = earth.radius;
    g_dist = distance_to_object(earth)*room_scale + SOI_radius;
    g_dist -= SOI_radius;
    new_g_dir = point_direction(x, y,earth.x, earth.y); 
}
// Check launch countdown and launch the shuttle if required
if (orbit==0 &amp;&amp; launch_countdown &lt;= 0){ 
    speed = 23;
    orbit = 1;
    display_values = 1;
    // Get off the ground first!
    x = lengthdir_x(speed, direction) + x;
    y = lengthdir_y(speed, direction) + y;
    //Gravity turn
    direction -= 45*global.ns;
    }

switch (orbit) {    
    case 0: // Landed
        // Orbital motion
        //Enforce valid "orbit" at ground level
        //Orbit = SOI_radius/room_scale + sprite_width/2;
        Angle += SOI_rotation*global.ns;
        if(Angle &gt;= 360) Angle -= 360;
        if(Angle &lt; 0) Angle += 360;
        // Update position
        x = lengthdir_x(Orbit, Angle) + earth.x;
        y = lengthdir_y(Orbit, Angle) + earth.y;
        // Tidally locked rotation
        direction = point_direction(earth.x, earth.y, x, y);
        image_angle = direction -90;
        break;
    case 1: // Wandering
        // Calculate g_offset
        new_g_offset = 1/((sqr(g_dist/SOI_radius))/SOI_grav);
        // Calculate average of last tick and this tick grav vectors
        vxg = (lengthdir_x(g_offset, g_dir)+lengthdir_x(new_g_offset, new_g_dir))/2;
        vyg = (lengthdir_y(g_offset, g_dir)+lengthdir_y(new_g_offset, new_g_dir))/2;
        // Update object grav variables to this tick
        g_offset = new_g_offset;
        g_dir = new_g_dir;
        
        // Amend direction and speed
        // Apply grav vector to speed,direction vector
        vx = lengthdir_x(speed, direction);
        vy = lengthdir_y(speed, direction);
        speed = sqrt(sqr(vx+vxg) + sqr(vy+vyg));
        if (speed&gt;12) speed=12;
        direction = point_direction(0,0,vxg+vx,vyg+vy);
        
        // Update position and facing
        x = lengthdir_x(speed, direction) + x;
        y = lengthdir_y(speed, direction) + y;
        image_angle = direction-90;
        break;
    case 2: // LEO
        // Orbital motion
        Angle += 6;
        if(Angle &gt;= 360) Angle -= 360;
        if(Angle &lt; 0) Angle += 360;
        Orbit = 400/room_scale + earth.sprite_width/2;  // 4 px above surface...
        // Update position
        x = lengthdir_x(Orbit, Angle) + earth.x;
        y = lengthdir_y(Orbit, Angle) + earth.y;
        image_angle = direction -90;
        break;
    case 3: // GEO
        // Orbital motion
        Angle += global.ns;
        if(Angle &gt;= 360) Angle -= 360;
        if(Angle &lt; 0) Angle += 360;
        Orbit = 42200/room_scale;
        // Update position
        x = lengthdir_x(Orbit, Angle) + earth.x;
        y = lengthdir_y(Orbit, Angle) + earth.y;
        if (global.ns &gt; 0){
            direction = Angle + 90;
        } else {
            direction = Angle - 90;
        }
        image_angle = direction -90;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw the bits
draw_self();
if (display_values == 1){
    draw_set_colour(c_yellow);
    draw_set_font(g_font);
    draw_text(x+100,y-10,"Orbit: " + string(orbit));
    draw_text(x+100,y+50,"Speed: " + string(direction));
    draw_text(x+100,y+110,string_format(speed,6,4));
    draw_text(x+100,y+170,"Grav: " + string(g_dir));
    draw_text(x+100,y+230,string_format(g_offset,6,4));
}
// Destroy self if left the room
if (x &lt; 0 || x &gt; room_width || y &lt; 0 || y &gt; room_height){
    //Make a new one first
    var inst;
    inst = instance_create(random(2000)+earth.x-1000,random(2000)+earth.y-1000,spaceship1);
    instance_destroy();
} else {
    if (killme) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

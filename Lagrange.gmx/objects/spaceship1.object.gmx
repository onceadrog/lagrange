<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spaceship1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>orbiting</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>direction = random(360);
speed = random(5);
image_angle = direction-90;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get g_offset parameters
if (distance_to_object(moon)&lt;250){  //Assume moon SOI = 250px
    g_dist = distance_to_object(moon)*camera.room_scale;
    SOI_grav = moon.grav;
    SOI_radius = moon.radius;
    SOI_rotation = moon.rotation;
    g_dir = point_direction(x, y, moon.x, moon.y);
} else {
    g_dist = distance_to_object(earth)*camera.room_scale;
    SOI_grav = earth.grav;
    SOI_rotation = earth.rotation;
    SOI_radius = earth.radius; 
    g_dir = point_direction(x, y,earth.x, earth.y); 
}

// Fall to surface
if g_dist &gt; SOI_radius {
    grounded = false;
    }else {
    orbit_radius = SOI_radius/camera.room_scale
    rotation = SOI_rotation;
    grounded = true; }
    
// Calculate g_offset
g_offset = 1/((sqr(g_dist/SOI_radius))/SOI_grav)/10;
// divided by 10 as too extreme?
 vxg = lengthdir_x(g_offset, g_dir);
 vyg = lengthdir_y(g_offset, g_dir);
//vyg = g_offset*dsin(g_dir);
//vxg = g_offset*dcos(g_dir);

// Amend direction and speed
// Apply g_offset,g_dir to speed,direction vector
vx = lengthdir_x(speed, direction);
vy = lengthdir_y(speed, direction);
speed = sqrt(sqr(vx+vxg) + sqr(vy+vyg));
direction = point_direction(0,0,vxg+vx,vyg+vy);

// Update position and facing
x = lengthdir_x(speed, direction) + x;
y = lengthdir_y(speed, direction) + y;
image_angle = direction+90;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>spaceship1</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>random(1250)+500</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>random(1250)+500</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw the bits
draw_self();
draw_set_colour(c_yellow);
draw_set_font(g_font);
draw_text(x+50,y+50, g_dist);
draw_text(x+100,y+100,"Speed: " + string(direction));
draw_text(x+100,y+150,string_format(speed,6,4));
draw_text(x+100,y+200,"Grav: " + string(g_dir));
draw_text(x+100,y+250,string_format(g_offset,6,4));

// Destroy self if left the room
if (x &lt; 0 || x &gt; room_width || y &lt; 0 || y &gt; room_height){
    //Make a new one first
    var inst;
    inst = instance_create(random(1000)+750,random(1000)+750,spaceship1);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
